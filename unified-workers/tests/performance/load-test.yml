# Artillery Load Testing Configuration for Unified List Cutter Workers
# Phase 7 - Performance Testing and Optimization

config:
  target: 'http://localhost:8787'
  phases:
    # Warm up phase
    - duration: 60
      arrivalRate: 5
      name: "Warm up - Low load"
    
    # Gradual ramp up
    - duration: 120
      arrivalRate: 10
      rampTo: 25
      name: "Ramp up - Increasing load"
    
    # Sustained load
    - duration: 180
      arrivalRate: 25
      name: "Sustained load - Normal traffic"
    
    # Peak load
    - duration: 120
      arrivalRate: 50
      name: "Peak load - High traffic"
    
    # Stress test
    - duration: 60
      arrivalRate: 100
      name: "Stress test - Maximum load"
    
    # Cool down
    - duration: 60
      arrivalRate: 5
      name: "Cool down - Recovery"

  # Load test configuration
  http:
    timeout: 30
    pool: 50
    maxSockets: 50
  
  # Test data variables
  variables:
    testUsers:
      - username: "loadtest1"
        password: "testpass123"
        email: "loadtest1@example.com"
      - username: "loadtest2"
        password: "testpass123"
        email: "loadtest2@example.com"
      - username: "loadtest3"
        password: "testpass123"
        email: "loadtest3@example.com"
      - username: "loadtest4"
        password: "testpass123"
        email: "loadtest4@example.com"
      - username: "loadtest5"
        password: "testpass123"
        email: "loadtest5@example.com"
    
    csvSamples:
      - "name,age,city\nJohn,25,NYC\nJane,30,LA"
      - "product,price,category\nLaptop,1200,Electronics\nChair,300,Furniture"
      - "user,score,level\nPlayer1,1500,Advanced\nPlayer2,800,Beginner"

  # Performance thresholds
  ensure:
    p95: 200  # 95th percentile response time under 200ms
    p99: 500  # 99th percentile response time under 500ms
    maxErrors: 1%  # Error rate under 1%

  # Processor for custom logic
  processor: './load-test-processor.js'

# Test scenarios
scenarios:
  # Health check scenario (10% of traffic)
  - name: "Health Check"
    weight: 10
    flow:
      - get:
          url: "/health"
          expect:
            - statusCode: 200
            - hasProperty: "status"
            - equals: 
              - "{{ status }}"
              - "healthy"

  # User authentication flow (20% of traffic)
  - name: "Authentication Flow"
    weight: 20
    flow:
      # Register new user
      - post:
          url: "/api/accounts/register"
          json:
            username: "loadtest_{{ $randomString() }}"
            email: "loadtest_{{ $randomString() }}@example.com"
            password: "testpass123"
            password2: "testpass123"
          capture:
            - json: "$.access_token"
              as: "accessToken"
            - json: "$.user.username"
              as: "username"
          expect:
            - statusCode: [200, 201]
      
      # Login with created user
      - post:
          url: "/api/accounts/login"
          json:
            username: "{{ username }}"
            password: "testpass123"
          capture:
            - json: "$.access_token"
              as: "newAccessToken"
          expect:
            - statusCode: 200
      
      # Get user profile
      - get:
          url: "/api/accounts/user"
          headers:
            Authorization: "Bearer {{ newAccessToken }}"
          expect:
            - statusCode: 200

  # File upload and processing flow (40% of traffic)
  - name: "File Upload and Processing"
    weight: 40
    flow:
      # Login first
      - function: "loginTestUser"
      
      # Upload CSV file
      - post:
          url: "/api/list_cutter/upload"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          formData:
            file: "{{ csvSamples[$randomInt(0, 2)] }}"
          capture:
            - json: "$.file_id"
              as: "fileId"
          expect:
            - statusCode: [200, 201]
      
      # Process the uploaded file
      - post:
          url: "/api/list_cutter/csv_cutter"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:
            file_id: "{{ fileId }}"
            selected_columns: ["name", "age"]
            where_filters: {}
          capture:
            - json: "$.processed_data"
              as: "processedData"
          expect:
            - statusCode: 200
      
      # Download processed results
      - post:
          url: "/api/list_cutter/export_csv"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:
            file_id: "{{ fileId }}"
            format: "csv"
          expect:
            - statusCode: 200

  # File management operations (20% of traffic)
  - name: "File Management"
    weight: 20
    flow:
      # Login
      - function: "loginTestUser"
      
      # List saved files
      - get:
          url: "/api/list_cutter/list_saved_files"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
      
      # Upload a file to manage
      - post:
          url: "/api/list_cutter/upload"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          formData:
            file: "{{ csvSamples[0] }}"
          capture:
            - json: "$.file_id"
              as: "managedFileId"
          expect:
            - statusCode: [200, 201]
      
      # Update file tags
      - patch:
          url: "/api/list_cutter/update_tags/{{ managedFileId }}"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          json:
            tags: ["load-test", "performance", "test-data"]
          expect:
            - statusCode: 200
      
      # Fetch file details
      - get:
          url: "/api/list_cutter/fetch_saved_file/{{ managedFileId }}"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: 200
      
      # Delete the test file
      - delete:
          url: "/api/list_cutter/delete/{{ managedFileId }}"
          headers:
            Authorization: "Bearer {{ accessToken }}"
          expect:
            - statusCode: [200, 204]

  # Frontend static asset loading (10% of traffic)
  - name: "Frontend Assets"
    weight: 10
    flow:
      # Load main page
      - get:
          url: "/"
          expect:
            - statusCode: 200
      
      # Load static assets (simulated)
      - get:
          url: "/assets/style.css"
          expect:
            - statusCode: [200, 404]  # 404 is ok if asset doesn't exist yet
      
      - get:
          url: "/assets/app.js"
          expect:
            - statusCode: [200, 404]  # 404 is ok if asset doesn't exist yet