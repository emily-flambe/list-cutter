"""
Django settings for cta project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import json
import os
from pathlib import Path
from datetime import timedelta

def get_env_variable(var_name, default=None):
    """Get the environment variable or return exception"""
    try:
        env = os.environ[var_name]
    except KeyError:
        if default is not None:
            return default

        error_msg = "Set the {} env variable".format(var_name)
        raise Exception("ImproperlyConfigured: {}".format(error_msg))

    if env.lower() == "true":
        return True
    elif env.lower() == "false":
        return False
    else:
        return env


def get_release_sha():
    deploy_json_file = "/app/deploy.json"

    if os.path.exists(deploy_json_file):
        deploy_info = json.load(open(deploy_json_file))

        return deploy_info

    return False


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-b48ta14-l45z4q$4sqarf(@5&^5xojsku0t85x0!af6+@f=bbj"


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin.apps.SimpleAdminConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_extensions",
    "rest_framework",
    "corsheaders",
    "rest_framework_simplejwt",
    ## Third-party apps
    "adminplus",
    "django_vite",
    # Apps in this project
    "list_cutter",
    "accounts",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
]

STORAGES = {
    "staticfiles": {
        "BACKEND": "whitenoise.storage.CompressedManifestStaticFilesStorage",
    },
}

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": ["/app/templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_ROOT = get_env_variable("STATIC_ROOT", default="/app/static")
STATIC_URL = "static/"

# This config will move the Vite build output to the STATIC_ROOT under assets
VITE_OUTPUT_DIR = f"{STATIC_ROOT}/js/app/public/"
DJANGO_VITE = {
     "default": {
        "manifest_path": "/app/static/js/app/public/.vite/manifest.json",
     }
 }

# Only add to STATICFILES_DIRS if the directory exists
STATICFILES_DIRS = []
if os.path.exists(VITE_OUTPUT_DIR):
    STATICFILES_DIRS.append(VITE_OUTPUT_DIR)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '60/minute',
        'user': '60/minute',    },
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Use JWT!
    ],
}


CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# Redirect to home page after login/logout
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/login/'

##############################
# FILE UPLOAD SETTINGS
##############################

BASE_DIR = Path(__file__).resolve().parent.parent.parent # this resolves to app/
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # app/media - needs to match where the volume is mounted in docker-compose.yml
MEDIA_URL = '/media/'

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=10),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
    "AUTH_COOKIE": "access_token",
    "AUTH_COOKIE_HTTP_ONLY": True,
    "AUTH_COOKIE_SECURE": True,
}


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'DEBUG',  # Change to 'INFO' or 'WARNING' as needed
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING',  # Log warnings for requests
            'propagate': True,
        },
    },
}

# Neo4j settings (Legacy - Phase 3)
from neomodel import config as neomodel_config

NEOMODEL_SIGNALS = False  # optional, depending on your use-case

NEO4J_PASSWORD = get_env_variable("NEO4J_PASSWORD", "password")
NEO4J_HOST = get_env_variable("NEO4J_HOST", "HOST_NOT_SET__RIP")
# Local connection (like, from my computer)
neomodel_config.DATABASE_URL = f'bolt://neo4j:{NEO4J_PASSWORD}@host.docker.internal:7687'

# D1 Database settings (Phase 4+)
D1_DATABASE_CONFIG = {
    'local_db_path': get_env_variable("D1_LOCAL_PATH", ".wrangler/state/v3/d1/miniflare-D1DatabaseObject/*.sqlite"),
    'database_name': get_env_variable("D1_DATABASE_NAME", "cutty-dev"),
    'use_d1': get_env_variable("USE_D1_DATABASE", False),  # Feature flag for gradual migration
}

# Phase 4 Feature Flags
PHASE_4_FEATURES = {
    'use_d1_for_users': get_env_variable("USE_D1_USERS", False),
    'use_d1_for_files': get_env_variable("USE_D1_FILES", False), 
    'use_d1_for_persons': get_env_variable("USE_D1_PERSONS", False),
    'use_d1_for_relationships': get_env_variable("USE_D1_RELATIONSHIPS", False),
}

