name = "cutty-api"
main = "src/index.ts"
compatibility_date = "2024-12-30"
compatibility_flags = ["nodejs_compat"]
workers_dev = true

# Enable versioning and gradual deployments
[version_metadata]
enable_versions = true

# Development configuration
[dev]
port = 8788
local_protocol = "http"
ip = "127.0.0.1"

# Build configuration
[build]
command = "npm run build"

# Environment variables (non-sensitive)
[vars]
ENVIRONMENT = "development"
API_VERSION = "v1"
CORS_ORIGIN = "http://localhost:5173"
MAX_FILE_SIZE = "52428800" # 50MB in bytes
JWT_ISSUER = "cutty"
JWT_AUDIENCE = "cutty-api"

# D1 Database bindings
[[d1_databases]]
binding = "DB"
database_name = "cutty-dev"
database_id = "2f87e313-31ff-4298-ab18-552fa5a1ce0e"
migrations_dir = "./migrations"

# R2 Storage bindings
[[r2_buckets]]
binding = "FILE_STORAGE"
bucket_name = "cutty-files-dev"
preview_bucket_name = "cutty-files-dev"

# KV Namespace bindings (commented out - create your own KV namespace and update ID)
# [[kv_namespaces]]
# binding = "AUTH_TOKENS"
# id = "your-kv-namespace-id-here"
# preview_id = "your-preview-kv-namespace-id-here"

# Queue bindings (commented out - create your own queue and update name)
# [[queues.producers]]
# binding = "CSV_QUEUE"
# queue = "csv-processing"

# [[queues.consumers]]
# queue = "csv-processing"
# max_batch_size = 10
# max_batch_timeout = 5

# Analytics Engine binding
[[analytics_engine_datasets]]
binding = "ANALYTICS"
dataset = "cutty-metrics"

# Cron triggers for storage metrics aggregation
# Daily aggregation at 2 AM UTC
[[triggers.crons]]
cron = "0 2 * * *"
endpoint = "/api/metrics/jobs/daily-aggregation"

# Daily snapshots at 1 AM UTC
[[triggers.crons]]
cron = "0 1 * * *"
endpoint = "/api/metrics/jobs/update-daily-snapshots"

# Weekly aggregation every Monday at 3 AM UTC
[[triggers.crons]]
cron = "0 3 * * 1"
endpoint = "/api/metrics/jobs/weekly-aggregation"

# Monthly aggregation on 1st of month at 4 AM UTC
[[triggers.crons]]
cron = "0 4 1 * *"
endpoint = "/api/metrics/jobs/monthly-aggregation"

# Cleanup old metrics every Sunday at 5 AM UTC
[[triggers.crons]]
cron = "0 5 * * 0"
endpoint = "/api/metrics/jobs/cleanup-old-metrics"

# Metrics health check every 5 minutes
[[triggers.crons]]
cron = "*/5 * * * *"
endpoint = "/api/metrics/jobs/health-check"

# Alert system cron triggers
# Alert evaluation every 5 minutes
[[triggers.crons]]
cron = "*/5 * * * *"
endpoint = "/api/alerts/jobs/evaluate"

# Retry failed notifications every 15 minutes
[[triggers.crons]]
cron = "*/15 * * * *"
endpoint = "/api/alerts/jobs/retry-notifications"

# Alert cleanup daily at 3 AM UTC
[[triggers.crons]]
cron = "0 3 * * *"
endpoint = "/api/alerts/jobs/cleanup"

# Alert health check every 5 minutes
[[triggers.crons]]
cron = "*/5 * * * *"
endpoint = "/api/alerts/jobs/health-check"

# Staging environment
[env.staging]
name = "cutty-api-staging"
vars = { ENVIRONMENT = "staging", CORS_ORIGIN = "https://staging.cutty.com" }

[[env.staging.d1_databases]]
binding = "DB"
database_name = "cutty-staging"
database_id = "e16924c6-be97-4012-88ac-79ff31fd5304"

[[env.staging.r2_buckets]]
binding = "FILE_STORAGE"
bucket_name = "cutty-files-staging"
preview_bucket_name = "cutty-files-preview"

# [[env.staging.kv_namespaces]]
# binding = "AUTH_TOKENS"
# id = "your-staging-kv-namespace-id-here"

# Production environment
[env.production]
name = "cutty-api-production"
vars = { ENVIRONMENT = "production", CORS_ORIGIN = "https://cutty.com" }
routes = [
  { pattern = "api.cutty.com/*", zone_name = "cutty.com" }
]

[[env.production.d1_databases]]
binding = "DB"
database_name = "cutty-production"
database_id = "0a6c6836-02e8-4f91-a37a-7eb82aa58e0f"

[[env.production.r2_buckets]]
binding = "FILE_STORAGE"
bucket_name = "cutty-files-prod"
preview_bucket_name = "cutty-files-dev"

# [[env.production.kv_namespaces]]
# binding = "AUTH_TOKENS"
# id = "your-production-kv-namespace-id-here"

# Service bindings for microservices architecture (future)
# [[services]]
# binding = "AUTH_SERVICE"
# service = "cutty-auth"

# Rate limiting rules (commented out - need to configure proper rate limiting)
# [[unsafe.bindings]]
# binding = "RATE_LIMITER"
# type = "ratelimit"
# namespace_id = "1"
# simple = { limit = 100, period = 60 }