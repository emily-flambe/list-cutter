name: Deploy web application

description: |
  Once you are ready to redeploy the web application, you can trigger this workflow.
  It will pull the latest images from Docker Hub and deploy them to the target host.  
  Just select the image tag you want to deploy (probably `latest` or `dev` unless you are doing something showoffy)
  and the instance you want to deploy to (dev, prod-blue, prod-green).
  **CUTE EVENTUAL TODO (LATER, I AM BUSY): Automate full prod deployment by deploying to prod-blue, waiting to make sure it's working,
  and then deploying to prod-green.

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (dev or latest. NOTHING SHOWOFFY.)'
        required: true
        default: 'dev'
        options:
          - dev
          - latest
      instance:
        description: 'Instance (dev, prod-blue, prod-green)'
        required: true
        default: 'dev'
        options:
          - dev
          - prod-blue
          - prod-green
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'dev'

jobs:
  deploy-rebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up environment variables (from workflow inputs)
        id: set_env_vars
        run: |
          if [ "${{ github.event.inputs.instance }}" == "dev" ]; then
            echo "TARGET_HOST=${{ secrets.DEV_HOST }}" >> $GITHUB_ENV
            echo "ENVIRONMENT=dev" >> $GITHUB_ENV
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_DEV }}" >> $GITHUB_ENV
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD_DEV }}" >> $GITHUB_ENV
            echo "NEO4J_HOST=${{ secrets.NEO4J_HOST_DEV }}" >> $GITHUB_ENV
          else
            echo "ENVIRONMENT=prod" >> $GITHUB_ENV
            echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST_PROD }}" >> $GITHUB_ENV
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "NEO4J_PASSWORD=${{ secrets.NEO4J_PASSWORD_PROD }}" >> $GITHUB_ENV
            echo "NEO4J_HOST=${{ secrets.NEO4J_HOST_PROD }}" >> $GITHUB_ENV
            if [ "${{ github.event.inputs.instance }}" == "prod-blue" ]; then
              echo "TARGET_HOST=${{ secrets.PROD_BLUE_HOST }}" >> $GITHUB_ENV
            elif [ "${{ github.event.inputs.instance }}" == "prod-green" ]; then
              echo "TARGET_HOST=${{ secrets.PROD_GREEN_HOST }}" >> $GITHUB_ENV
            fi
          fi          

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create SSH config
        run: |
          cat <<EOF >> ~/.ssh/config
          Host bastion
            HostName "${{ secrets.BASTION_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa

          Host target
            HostName "${{ env.TARGET_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
          EOF

      - name: Preload known hosts for bastion
        run: |
          ssh-keyscan -H "${{ secrets.BASTION_HOST }}" >> ~/.ssh/known_hosts

      - name: Preload target host key via bastion
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.BASTION_HOST }} "ssh-keyscan -H '${{ env.TARGET_HOST }}'" >> ~/.ssh/known_hosts

      - name: SSH into target host and pull changes from branch where this workflow was triggered
        run: |
          ssh target "eval \"\$(ssh-agent -s)\" \
          && ssh-add github \
          && cd list-cutter \
          && git fetch origin ${{ github.event.inputs.branch }} \
          && git reset --hard FETCH_HEAD"

      - name: 'Create/Update env file on target host'
        run: |
          ssh target "rm -f list-cutter/.env || true \
          && touch list-cutter/.env \
          && echo DJANGO_SETTINGS_MODULE=config.settings.${{ env.ENVIRONMENT }} >> list-cutter/.env \
          && echo EMAIL_ENABLED=True >> list-cutter/.env \
          && echo ANALYTICS_ENABLED=False >> list-cutter/.env \
          && echo DD_TRACE_ENABLED=False >> list-cutter/.env \
          && echo ENABLE_DEBUG_TOOLBAR=False >> list-cutter/.env \
          && echo "POSTGRES_PORT=5432" >> list-cutter/.env \
          && echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> list-cutter/.env \
          && echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> list-cutter/.env \
          && echo "POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}" >> list-cutter/.env \
          && echo "POSTGRES_HOST=${{ env.POSTGRES_HOST }}" >> list-cutter/.env \
          && echo "VITE_MAX_UPLOAD_SIZE=10485760" >> list-cutter/.env \
          && echo "NEO4J_PASSWORD=${{ env.NEO4J_PASSWORD }}" >> list-cutter/.env \
          && echo "NEO4J_HOST=${{ env.NEO4J_HOST }}" >> list-cutter/.env"


      - name: SSH into target host and run deployment script
        run: |
          ssh target "cd list-cutter && bash ./scripts/deploy.sh ${{ github.event.inputs.image_tag }}"          