name: Deploy web application

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: 'Docker image tag (dev or latest. NOTHING SHOWOFFY.)'
        required: true
        default: 'dev'
        options:
          - dev
          - latest
      instance:
        description: 'Instance (dev, prod-blue, prod-green)'
        required: true
        default: 'dev'
        options:
          - dev
          - prod-blue
          - prod-green
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'dev'

jobs:
  deploy-rebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up environment variables (from workflow inputs)
        id: set_hosts
        run: |
          if [ "${{ github.event.inputs.instance }}" == "dev" ]; then
            echo "TARGET_HOST=${{ secrets.DEV_HOST }}" >> $GITHUB_ENV
            echo "ENV_FILE=${{ secrets.DEV_ENV }}" >> $GITHUB_ENV
          else
            echo "ENV_FILE=${{ secrets.PROD_ENV }}" >> $GITHUB_ENV
            if [ "${{ github.event.inputs.instance }}" == "prod-blue" ]; then
              echo "TARGET_HOST=${{ secrets.PROD_BLUE_HOST }}" >> $GITHUB_ENV
            elif [ "${{ github.event.inputs.instance }}" == "prod-green" ]; then
              echo "TARGET_HOST=${{ secrets.PROD_GREEN_HOST }}" >> $GITHUB_ENV
            fi
          fi          

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          printf '%s\n' "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: Create SSH config
        run: |
          cat <<EOF >> ~/.ssh/config
          Host bastion
            HostName "${{ secrets.BASTION_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa

          Host target
            HostName "${{ env.TARGET_HOST }}"
            User ec2-user
            IdentityFile ~/.ssh/id_rsa
            ProxyJump bastion
          EOF

      - name: Preload known hosts for bastion
        run: |
          ssh-keyscan -H "${{ secrets.BASTION_HOST }}" >> ~/.ssh/known_hosts

      - name: Preload target host key via bastion
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.BASTION_HOST }} "ssh-keyscan -H '${{ secrets.DEV_HOST }}'" >> ~/.ssh/known_hosts

      - name: SSH into target host and pull changes from branch where this workflow was triggered
        run: |
          ssh target "eval \"\$(ssh-agent -s)\" \
          && ssh-add github \
          && cd list-cutter \
          && git fetch origin ${{ github.event.inputs.branch }} \
          && git reset --hard FETCH_HEAD"

      - name: Update .env file on target host
        env:
          DJANGO_SETTINGS_MODULE: config.settings.dev
          EMAIL_ENABLED: "True"
          ANALYTICS_ENABLED: "False"
          DD_TRACE_ENABLED: "False"
          ENABLE_DEBUG_TOOLBAR: "False"
          POSTGRES_HOST: db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: list_cutter
          POSTGRES_PORT: "5432"
        run: |
          ssh target <<'ENDSSH'
cat > list-cutter/.env <<EOF
DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
EMAIL_ENABLED=${EMAIL_ENABLED}
ANALYTICS_ENABLED=${ANALYTICS_ENABLED}
DD_TRACE_ENABLED=${DD_TRACE_ENABLED}
ENABLE_DEBUG_TOOLBAR=${ENABLE_DEBUG_TOOLBAR}

POSTGRES_HOST=${POSTGRES_HOST}
POSTGRES_USER=${POSTGRES_USER}
POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
POSTGRES_DB=${POSTGRES_DB}
POSTGRES_PORT=${POSTGRES_PORT}
EOF
ENDSSH

      # - name: SSH into target host and run deployment script
      #   run: |
      #     ssh target "cd list-cutter && bash ./scripts/deploy.sh image_tag=${{ github.event.inputs.image_tag }}"
