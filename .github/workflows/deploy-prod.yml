name: Deploy to Production

on:
  workflow_dispatch:

jobs:
  deploy-prod:
    
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      deployments: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies - Frontend
        working-directory: app/frontend
        run: npm ci
      
      - name: Build Frontend
        working-directory: app/frontend
        run: npm run build
        env:
          CI: true
          NODE_ENV: production
      
      - name: Install dependencies - Cloudflare Worker
        working-directory: cloudflare/workers
        run: npm ci
      
      - name: Create GitHub deployment
        id: deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploy to production via workflow dispatch',
              auto_merge: false,
              required_contexts: [],
              production_environment: true
            });
            return deployment.data.id;
          result-encoding: string
      
      - name: Deploy to Cloudflare Workers (Production)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          workingDirectory: cloudflare/workers
          command: deploy
          wranglerVersion: '4.24.3'
      
      - name: Update deployment status - Success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'success',
              environment_url: 'https://list-cutter.com',
              description: 'Deployment to production succeeded'
            });
      
      - name: Update deployment status - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: 'failure',
              description: 'Deployment to production failed'
            });
      
      - name: Log deployment success
        if: success()
        run: |
          echo "üöÄ Deployment to PRODUCTION successful!"
          echo "üåê Production URL: https://list-cutter.com"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üè∑Ô∏è Triggered by: Manual workflow dispatch"
          echo "‚ö†Ô∏è Environment: PRODUCTION"
      
      - name: Log deployment failure
        if: failure()
        run: |
          echo "‚ùå Deployment to PRODUCTION failed"
          echo "üìù Commit: ${{ github.sha }}"
          echo "üè∑Ô∏è Triggered by: Manual workflow dispatch"
          echo "‚ö†Ô∏è Environment: PRODUCTION"
          echo "Please check the workflow logs for more details."